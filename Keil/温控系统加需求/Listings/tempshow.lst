C51 COMPILER V9.59.0.0   TEMPSHOW                                                          06/20/2022 22:32:39 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE TEMPSHOW
OBJECT MODULE PLACED IN .\Objects\tempshow.obj
COMPILER INVOKED BY: E:\keli\C51\BIN\C51.EXE tempshow.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\tem
                    -pshow.lst) TABS(2) OBJECT(.\Objects\tempshow.obj)

line level    source

   1          #include <tempshow.h>
   2          
   3          void temp_show()
   4          {
   5   1        check_key();
*** WARNING C206 IN LINE 5 OF tempshow.c: 'check_key': missing function-prototype
   6   1        if(read_temp_flag == 1)
   7   1        {
   8   2          read_temp_flag = 0;
   9   2          temp1 = read_temperature();           // 读取温度
  10   2          temperature = (float)temp1*0.0625;    // 实际温度值
  11   2          temp = (int)temperature * 10;             // 计算温度值
  12   2        }
  13   1        if(DisFlag == 1)
  14   1        {
  15   2          DisFlag=0;
  16   2          if((temperature>0)&&(temperature<150))
  17   2          {
  18   3            show_num(1,4,32,num+16*15);                 // +
  19   3            show_num(1,4,40,num+16*(temp/100));         // 温度第一位
  20   3            show_num(1,4,48,num+16*(temp%100/10));      // 温度第二位
  21   3            show_num(2,4,0,num+16*(temp%10));           // 温度第三位
  22   3        
  23   3            if(temperature<setL)        // 温度过低
  24   3            {
  25   4                relay_jiare=0;    // 开启升温 关闭降温
  26   4                relay_zhileng=1;
  27   4                show_ch(2,4,32,ch1+32*8);   // 过
  28   4                show_ch(2,4,48,ch1+32*10);  // 冷
  29   4            }else if(temperature>setH)  // 温度过高
  30   3            {
  31   4                relay_jiare=1;    // 关闭升温 开启降温
  32   4                relay_zhileng=0;
  33   4                show_ch(2,4,32,ch1+32*8);   // 过
  34   4                show_ch(2,4,48,ch1+32*9);  // 热
  35   4            }else{
  36   4                relay_jiare=1;    // 关闭升温 关闭降温
  37   4                relay_zhileng=1;
  38   4                buzLater=0;       // 正常情况
  39   4                show_ch(2,4,32,ch1+32*6);       // 正
  40   4                show_ch(2,4,48,ch1+32*7);       // 常
  41   4            }
  42   3            if(buzLater>=2)       // 若非正常清零 过高过低累加 超过2秒即
  43   3            {
  44   4              buzzer=0;           // 打开蜂鸣器
  45   4              delay_ms(1000);       
  46   4            }else{        
  47   4              buzzer=1;           // 关闭蜂鸣器
  48   4            } 
  49   3          }
  50   2      /******************显示温度上下限值***********************/
  51   2          show_num(1,6,16,num+16*15);                 // 下限 +
  52   2          show_num(1,6,24,num+16*(setL/10));          // 温度第一位
  53   2          show_num(1,6,32,num+16*(setL%10));          // 温度第二位
C51 COMPILER V9.59.0.0   TEMPSHOW                                                          06/20/2022 22:32:39 PAGE 2   

  54   2          show_num(2,6,16,num+16*15);                 // 上限 +
  55   2          show_num(2,6,24,num+16*(setH/10));          // 温度第一位
  56   2          show_num(2,6,32,num+16*(setH%10));          // 温度第二位
  57   2      
  58   2          if(SetFlag == 0)        // 查询按键设置标志
  59   2          {
  60   3            show_ch(1,6,0,ch1+32*15); // ↓
  61   3            show_ch(2,6,0,ch1+32*14); // ↑ 更新显示标志
  62   3          }else if(SetFlag == 1)                // 按键设置标志
  63   2            {
  64   3              show_ch(1,6,0,ch1+32*15);         // ↓
  65   3              delay_ms(500);
  66   3              show_ch(1,6,0,ch1+32*16);         // 更新显示标志(闪烁)
  67   3            }else if(SetFlag == 2)              // 查询按键设置标志
  68   2            {
  69   3              show_ch(2,6,0,ch1+32*14);         // ↑
  70   3              delay_ms(500);
  71   3              show_ch(2,6,0,ch1+32*16);         // 更新显示标志(闪烁)
  72   3            }
  73   2          
  74   2        } 
  75   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    818    ----
   CONSTANT SIZE    =   1552    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  1 WARNING(S),  0 ERROR(S)
